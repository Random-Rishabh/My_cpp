#include<iostream>
#include<cstdio>
#include<cstdlib>
using namespace std;
//void printhello(){                        ///for part 4
//	printf(" helloworld\n");
//}
//int *add(int*a,int *b){                    //for part 4
//	int*c=(int*)malloc(sizeof(int));
//	*c=(*a)+(*b);
//	return &c;
//}


//...........................................................................................................................................................//
//...........................................................................................................................................................//


//int Ad(int a, int b){                       //for part 5
//	return (a+b);
//}
//void hello(char* nme){                     //for part 5
//	cout<<" hello "<<nme;
//}

//...........................................................................................................................................................//
//...........................................................................................................................................................//

//void A(){										//for part 6
//	printf("hello");
//}
//
//void B(void (*ptr)()){// function pointer as argument							//for part 6
//	ptr();    									//callback function that ptr poits to
//}

//...........................................................................................................................................................//
//.................................................................part 7...................................................................................//

//int comparee(int a,int b){
//	if(abs(a)>abs(b))return 1;
//	return -1;
//}
//void bbsort(int *a,int n,int (*comparee)(int,int)){
//	int i,j,temp;
//	for(i=0;i<n;i++){
//		for(j=0;j<n;j++){
//			if(comparee(a[j],a[j+1])>0){
//				swap(a[j],a[j+1]);
//			}
//		}
//	}
//}

int main(){
	//...........................................................................................................................................................//
	//...........................................................................................................................................................//
	//..................................................................Part 1...................................................................................//
	//...........................................................................................................................................................//
	//...........................................................1D array and pointer............................................................................////	int a[4]={3,7,56,7};
//	int *y;
//	y=a;
//	cout<<y<<" "<<(y+1)<<endl;//y+1 leads us to next element in array
//	void *l;
//	l=a;
//	cout<<l<<" "<<l+1<<endl;//void pointer eads to nexte byte of array
//	l=(int*)a;
//	cout<<(char*)l<<"\a "<<(char*)(l+12)<<(char*)(l+12)<<endl;//all about pointers and 1d array
//	
//	
//	
//	//...........................................................................................................................................................//
//	//...........................................................................................................................................................//
//	//...........................................................................Part 2..........................................................................//
//	//...........................................................................................................................................................//
//	//....................................................................2D array and pointer..................................................................//
//	
//	int b[2][3]={{2,4,6},{5,8,90}};
//	int (*kb)[3]=b;//groupof 3 pointers each pointing to the address of first element of each array 
///*	int *k;
//	k=b; it do not work as b is a 2 dimaentional array hence b points to first array of that 2d array*/
//	cout<<b<<" "<<kb<<" "<<&b[0]<<endl;//are same 
//	cout<<b+1<<" "<<kb+1<<endl;//re same as b and b+1 as kb denotes a complete array of a 2d array
//	void *kp;
//	kp=b;// this works as void pointer works for all data type
//	cout<<(int*)kp<<" "<<(int*)(kp+1)<<endl;//will point to next byte
//	cout<<*b<<" "<<*(b+1)<<" "<<*b+1<<endl;
//	cout<<&b[0]<<" "<<&(b[0])<<" "<<&b[0]+1<<endl;
//	cout<<b[0]<<" "<<b[0]+1<<endl;
//	cout<<&b[0][0]<<endl;
//	cout<<*(b+1)+1<<" "<<b[1]+1<<endl;//same as &b[1][2]
//	
//	cout<<*b[1]<<" "<<*(*(b+1)+1)<<endl;//b[i][j]=*(b[i]+j)=*(*(b+i)+j)
//thats all for 2d array
//similarly it works for nD array as if g is an nD array printing g will return address of a (n-1)D arry hence it must be stored in a int*p[][][]...(n-1) pointer

//
////...........................................................................................................................................................//
////...........................................................................................................................................................//
////...................................................................Part 3..................................................................................//
////...........................................................................................................................................................//
////............................................................Dynamic passing of array...........................................................................//
//

//
////dynamic passing of array
//int w,m;
//cin>>w;
//int *h=(int*)malloc(w*(sizeof(int)));//or can use "new int[w]"... use appropriate header file for malloc
//for(int ij=0;ij,ij++){
//	cin>>m;
//	h[ij]=m;
//}
//free(h);//after use... also can use delete h
//
////...........................................................................................................................................................//
////...........................................................................................................................................................//
////.....................................................................Part 4................................................................................//
////...........................................................................................................................................................//
////............................................................Pointer as function return.....................................................................//



//int a=2,b=4;
//int *ptr=add(&a,&b);// this code doesnt work sometimes as the stack will take  value of 6 which after the completion of function removed by the stack ..
//// but the pointer stays there which can be overwritten by the printhello function .. to remove this condition we create a malloc in add func. which gives a poineter from heap instead of stack
//printhello();
//cout<<*ptr;


//...........................................................................................................................................................//
//...........................................................................................................................................................//
//.......................................................................Part 5..............................................................................//
//...........................................................................................................................................................//
//..................................................................Function Pointer...........................................................................//
	
//	int (*p)(int,int);
// void (*ptr)(char*);
// ptr=hello;
//	// pointer to the funtion which takes 2 input as argument ad return type int
//	p=Ad;// accessing that function which we want to use using this pointer  ... we can also write "p=Ad;" as function name will return us a po
//	int c=(*p)(2,9);// dereferencing and eecuting the function... or can use "int c=p(2,9);" as p contains the address of that function now
//	cout<<c<<endl;
//ptr("TOM");
//	
	
	
	
	
//...........................................................................................................................................................//
//...........................................................................................................................................................//
//.......................................................................Part 6..............................................................................//
//...........................................................................................................................................................//
//..................................................................Function callback......................................................................//
	
//	B(A);								//a is a callback function
	
	
//...........................................................................................................................................................//
//...........................................................................................................................................................//
//.......................................................................Part 7..............................................................................//
//...........................................................................................................................................................//
//.................................................................Function callback-2......................................................................//	
	
	
	
//	int as[]={3,-2,1,5,-6,7};
//	bbsort(as,6,comparee);
//	for(int i=0;i<6;i++){
//		cout<<as[i];
//	}
	
	
	return 0;

}
